#!/usr/bin/env node
const path = require('path');
const log = require('signale');
const fs = require('fs');
const exec = require('./helpers/exec');

const updateDependencies = async (
  object = {},
  flags = [],
  options = { cwd: process.cwd() }
) => {
  const keys = Object.keys(object);
  if (!keys.length) return;
  const string = keys.map((key) => `${key}@latest`).join(' ');
  const command = `npm install ${flags.join(' ')} ${string}`;
  log.info(`Running ${command}`);
  await exec(command, { ...options });
};

const main = async () => {
  const root = path.resolve(__dirname, '..');
  const packages = path.join(root, 'packages');
  const dirs = await fs.promises.readdir(packages);
  const validPackages = dirs
    .map((dir) => path.join(packages, dir))
    .filter((abspath) => {
      const stat = fs.statSync(abspath);
      return (
        stat.isDirectory() && fs.existsSync(path.join(abspath, 'package.json'))
      );
    });
  const promises = [root, ...validPackages].map(async (dir) => {
    const packageJsonContent = await fs.promises.readFile(
      path.join(dir, 'package.json'),
      'utf-8'
    );
    const json = JSON.parse(packageJsonContent);
    if ('dependencies' in json) {
      const flags = dir.includes('/packages/')
        ? ['--workspace', path.relative(root, dir)]
        : [];
      // console.log({ dependencies: true, dir, flags });
      await updateDependencies(json['dependencies'], flags);
    }
    if ('devDependencies' in json) {
      const flags = dir.includes('/packages/')
        ? ['--workspace', path.relative(root, dir), '--save-dev']
        : ['--save-dev'];
      // console.log({ devDependencies: true, dir, flags });
      await updateDependencies(json['devDependencies'], flags);
    }
  });
  await Promise.all(promises);
};

main()
  .then(() => {
    log.success('Dependencies updated');
  })
  .catch((error) => {
    log.error(error);
    process.exit(1);
  });
